---
AWSTemplateFormatVersion: '2010-09-09'
Description: >
  AWS CloudFormation template for dynamic Cloud 9 setups. Creates a Cloud9 bootstraps the instance.
  refer: https://github.com/aws-samples/aws-cloud9-bootstrapping-example/blob/main/example_instancestack.yaml
Parameters:
  ExampleC9InstanceType:
    Description: Example Cloud9 instance type
    Type: String
    AllowedValues:
      - t2.micro
      - t3.small
      - t3.medium
      - m5.large
    ConstraintDescription: Must be a valid Cloud9 instance type
    Default: m5.large
  ExampleC9InstanceAMI:
    Description: Example Cloud9 instance AMI
    Type: String
    AllowedValues:
      - ubuntu-22.04-x86_64
      - amazonlinux-2-x86_64
    Default: ubuntu-22.04-x86_64
  ExampleC9EnvType: 
    Description: Environment type.
    Default: self
    Type: String
    AllowedValues: 
      - self
      - 3rdParty
    ConstraintDescription: must specify self or 3rdParty.
  ExampleOwnerArn: 
    Type: String
    Description: >
      The Arn of the Cloud9 Owner to be set if 3rdParty deployment. 
      Member must satisfy regular expression pattern: 
      "^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):(iam|sts)::\d+:(root|(user\/[\w+=/:,.@-]{1,64}|federated-user\/[\w+=/:,.@-]{2,32}|assumed-role\/[\w+=:,.@-]{1,64}\/[\w+=,.@-]{1,64}))$"
    Default: "arn:aws:sts::ACCOUNT_ID:assumed-role/panlm/granted"
  ExampleC9InstanceVolumeSize: 
    Type: Number
    Description: The Size in GB of the Cloud9 Instance Volume. 
    Default: 50

Conditions: 
  Create3rdPartyResources: !Equals [ !Ref ExampleC9EnvType, 3rdParty ]
  CreateUbuntuResources: !Equals [!Ref ExampleC9InstanceAMI, "ubuntu-22.04-x86_64"]
  CreateAL2Resources: !Equals [!Ref ExampleC9InstanceAMI, "amazonlinux-2-x86_64"]


Resources:
################## PERMISSIONS AND ROLES #################
  ExampleC9Role:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: Environment
          Value: !Ref AWS::StackName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - ssm.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AdministratorAccess
      Path: "/"

  ExampleC9LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName:
          Fn::Join:
          - ''
          - - ExampleC9LambdaPolicy-
            - Ref: AWS::Region
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - cloudformation:DescribeStacks
            - cloudformation:DescribeStackEvents
            - cloudformation:DescribeStackResource
            - cloudformation:DescribeStackResources
            - ec2:RebootInstances
            - ec2:DescribeInstances
            - ec2:AssociateIamInstanceProfile
            - ec2:ModifyInstanceAttribute
            - ec2:ReplaceIamInstanceProfileAssociation
            - iam:ListInstanceProfiles
            - iam:PassRole
            Resource: "*"

################## LAMBDA BOOTSTRAP FUNCTION ################

  ExampleC9BootstrapInstanceLambda:
    Description: Bootstrap Cloud9 instance
    Type: Custom::ExampleC9BootstrapInstanceLambda
    DependsOn:
    - ExampleC9BootstrapInstanceLambdaFunction
    - ExampleC9Instance
    - ExampleC9InstanceProfile
    - ExampleC9LambdaExecutionRole
    Properties:
      Tags:
        - Key: Environment
          Value: !Ref AWS::StackName
      ServiceToken:
        Fn::GetAtt:
        - ExampleC9BootstrapInstanceLambdaFunction
        - Arn
      REGION:
        Ref: AWS::Region
      StackName:
        Ref: AWS::StackName
      EnvironmentId:
        Ref: ExampleC9Instance
      LabIdeInstanceProfileName:
        Ref: ExampleC9InstanceProfile
      LabIdeInstanceProfileArn:
        Fn::GetAtt:
        - ExampleC9InstanceProfile
        - Arn

  ExampleC9BootstrapInstanceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Tags:
        - Key: Environment
          Value: !Ref AWS::StackName
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
        - ExampleC9LambdaExecutionRole
        - Arn
      Runtime: python3.9
      MemorySize: 256
      Timeout: '600'
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import json
          import os
          import time
          import traceback
          import cfnresponse
          import logging
          logger = logging.getLogger()
          logger.setLevel("INFO")
          
          def lambda_handler(event, context):
              logger.info('event: {}'.format(event))
              logger.info('context: {}'.format(context))
              responseData = {}

              status = cfnresponse.SUCCESS
              
              if event['RequestType'] == 'Delete':
                  responseData = {'Success': 'Custom Resource removed'}
                  cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')              
          
              if event['RequestType'] == 'Create':
                  try:
                      # Open AWS clients
                      ec2 = boto3.client('ec2')
          
                      # Get the InstanceId of the Cloud9 IDE
                      instance = ec2.describe_instances(Filters=[{'Name': 'tag:Name','Values': ['aws-cloud9-'+event['ResourceProperties']['StackName']+'-'+event['ResourceProperties']['EnvironmentId']]}])['Reservations'][0]['Instances'][0]
                      logger.info('instance: {}'.format(instance))
          
                      # Create the IamInstanceProfile request object
                      iam_instance_profile = {
                          'Arn': event['ResourceProperties']['LabIdeInstanceProfileArn'],
                          'Name': event['ResourceProperties']['LabIdeInstanceProfileName']
                      }
                      logger.info('iam_instance_profile: {}'.format(iam_instance_profile))
          
                      # Wait for Instance to become ready before adding Role
                      instance_state = instance['State']['Name']
                      logger.info('instance_state: {}'.format(instance_state))
                      while instance_state != 'running':
                          time.sleep(5)
                          instance_state = ec2.describe_instances(InstanceIds=[instance['InstanceId']])
                          logger.info('instance_state: {}'.format(instance_state))
          
                      # attach instance profile
                      response = ec2.associate_iam_instance_profile(IamInstanceProfile=iam_instance_profile, InstanceId=instance['InstanceId'])
                      logger.info('response - associate_iam_instance_profile: {}'.format(response))
                      r_ec2 = boto3.resource('ec2')
  
                      # reboot instance to 
                      response1 = ec2.reboot_instances(InstanceIds=[instance['InstanceId']], DryRun=False)
                      logger.info('response - reboot_instances: {}'.format(response1))
                      time.sleep(10)
                      instance_state = ec2.describe_instances(InstanceIds=[instance['InstanceId']])

                      # Wait for Instance to become ready after reboot
                      instance_state = instance['State']['Name']
                      logger.info('instance_state: {}'.format(instance_state))
                      while instance_state != 'running':
                          time.sleep(5)
                          instance_state = ec2.describe_instances(InstanceIds=[instance['InstanceId']])
                          logger.info('instance_state: {}'.format(instance_state))

                      responseData = {'Success': 'Started bootstrapping for instance: '+instance['InstanceId']}
                      cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
                      
                  except Exception as e:
                      status = cfnresponse.FAILED
                      print(traceback.format_exc())
                      responseData = {'Error': traceback.format_exc(e)}
                  finally:
                      cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
################## SSM BOOTSRAP HANDLER ###############
  ExampleC9OutputBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties: 
#      VersioningConfiguration:
#        Status: Enabled
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  ExampleC9SSMDocument: 
    Type: AWS::SSM::Document
    Properties: 
      Tags:
        - Key: Environment
          Value: !Ref AWS::StackName
      DocumentType: Command
      DocumentFormat: YAML
      Content: 
        schemaVersion: '2.2'
        description: Bootstrap Cloud9 Instance
        mainSteps:
        - action: aws:runShellScript
          name: ExampleC9bootstrap
          inputs:
            runCommand:
            - "#!/bin/bash -x"
            - "TMPFILE=$(mktemp)"
            - !If [CreateUbuntuResources, "curl --location -o ${TMPFILE}-ONE.sh https://github.com/panlm/panlm.github.io/raw/main/docs/cloud9/script-ubuntu-prep-eks-env-part-one.sh", ""]
            - !If [CreateAL2Resources, "curl --location -o ${TMPFILE}-ONE.sh https://github.com/panlm/panlm.github.io/raw/main/docs/cloud9/script-prep-eks-env-part-one.sh", ""]
            - "chmod a+x ${TMPFILE}-ONE.sh"
            - !If [CreateUbuntuResources, "sudo -u ubuntu bash ${TMPFILE}-ONE.sh 2>&1", ""]
            - !If [CreateAL2Resources, "sudo -u ec2-user bash ${TMPFILE}-ONE.sh 2>&1", ""]
            - ""
            - "curl --location -o ${TMPFILE}-TWO.sh https://github.com/panlm/panlm.github.io/raw/main/docs/cloud9/script-prep-eks-env-part-two.sh"
            - "chmod a+x ${TMPFILE}-TWO.sh"
            - !If [CreateUbuntuResources, "sudo -u ubuntu bash ${TMPFILE}-TWO.sh 2>&1", ""]
            - !If [CreateAL2Resources, "sudo -u ec2-user bash ${TMPFILE}-TWO.sh 2>&1", ""]
            - ""
            - "export C9_INST_ID=$(curl 169.254.169.254/latest/meta-data/instance-id)"
            - "export C9_PID=$(aws ec2 describe-instances --instance-ids ${C9_INST_ID} --query 'Reservations[].Instances[].Tags[?Key==`aws:cloud9:environment`].Value' --output text)"
            - "echo C9_INST_ID: ${C9_INST_ID} C9_PID: ${C9_PID}"
            - "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query \"Account\" --output text)"
            - "aws cloud9 create-environment-membership --environment-id ${C9_PID} --user-arn arn:aws:sts::${AWS_ACCOUNT_ID}:assumed-role/WSParticipantRole/Participant --permissions read-write"
            - "aws cloud9 create-environment-membership --environment-id ${C9_PID} --user-arn arn:aws:sts::${AWS_ACCOUNT_ID}:assumed-role/panlm/granted --permissions read-write"
            - "aws sts assume-role --role-arn arn:aws:iam::${AWS_ACCOUNT_ID}:role/panlm --role-session-name \"granted\" |tee /tmp/tmp-session"
            - "export AWS_ACCESS_KEY_ID=$(cat /tmp/tmp-session |jq -r '.Credentials.AccessKeyId' )"
            - "export AWS_SECRET_ACCESS_KEY=$(cat /tmp/tmp-session |jq -r '.Credentials.SecretAccessKey' )"
            - "export AWS_SESSION_TOKEN=$(cat /tmp/tmp-session |jq -r '.Credentials.SessionToken' )"
            - "export AWS_DEFAULT_REGION=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r '.region')"
            - "aws sts get-caller-identity"
            # - !Join ["", ["aws cloud9 create-environment-membership --environment-id ${C9_PID} --user-arn arn:aws:sts::${AWS_ACCOUNT_ID}:assumed-role/", Ref: ExampleC9Role, "/${C9_INST_ID}", " --permissions read-write"]]
            - "aws cloud9 update-environment --environment-id ${C9_PID} --managed-credentials-action DISABLE"
            - "echo 0"
  
  ExampleC9BootstrapAssociation: 
    Type: AWS::SSM::Association
    DependsOn: ExampleC9OutputBucket 
    Properties: 
      Name: !Ref ExampleC9SSMDocument
      OutputLocation: 
        S3Location:
          OutputS3BucketName: !Ref ExampleC9OutputBucket
          OutputS3KeyPrefix: bootstrapoutput
      Targets:
        - Key: tag:Environment
          Values:
          - !Ref AWS::StackName

################## INSTANCE #####################
  ExampleC9InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: ExampleC9Role

  ExampleC9Instance:
    Description: "-"
    DependsOn: ExampleC9BootstrapAssociation
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      Description: AWS Cloud9 instance for Examples
      AutomaticStopTimeMinutes: 10080
      ImageId:
        Ref: ExampleC9InstanceAMI
      InstanceType:
        Ref: ExampleC9InstanceType
      Name:
        Ref: AWS::StackName
      OwnerArn: !If [Create3rdPartyResources, !Ref ExampleOwnerArn, !Ref "AWS::NoValue"]
#      OwnerArn: !If [Create3rdPartyResources, !Ref ExampleOwnerArn, !Join ["", ["arn:aws:sts::", Ref: AWS::AccountId, ":assumed-role/panlm/granted"]]]
      Tags: 
        - 
          Key: SSMBootstrap
          Value: Active
        - 
          Key: Environment
          Value: !Ref AWS::StackName

Outputs: 
  Cloud9IDE:
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: AWS::Region
        - ".console.aws.amazon.com/cloud9/ide/"
        - Ref: ExampleC9Instance
        - "?region="
        - Ref: AWS::Region
