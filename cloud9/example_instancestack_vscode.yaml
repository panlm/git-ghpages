---
AWSTemplateFormatVersion: '2010-09-09'
Description: >
  bootstraps vscode in EC2 due to cloud9 deprecated
  refer: https://aws.amazon.com/blogs/devops/how-to-migrate-from-aws-cloud9-to-aws-ide-toolkits-or-aws-cloudshell/
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcId
          - PublicSubnetId
      - Label:
          default: "EC2 Configuration"
        Parameters:
          - EC2InstanceType
          - EC2InstanceOS
          - EC2InstanceVolumeSize

Parameters:
  VpcId:
    Description: select VPC 
    Type: AWS::EC2::VPC::Id
    AllowedPattern: '(^$|^vpc-[a-z0-9]+$)'
  PublicSubnetId:
    Description: select one PUBLIC subnet 
    Type: AWS::EC2::Subnet::Id
    AllowedPattern: '(^$|^subnet-[a-z0-9]+$)'
  EC2InstanceType:
    Description: instance type
    Type: String
    AllowedValues:
      - t3.medium
      - t4g.medium
      - m5.large
    ConstraintDescription: Must be a valid instance type
    Default: t3.medium
  EC2InstanceOS:
    Description: instance AMI
    Type: String
    AllowedValues:
      - ubuntu22
      - amazonlinux2023
    Default: amazonlinux2023
  EC2InstanceVolumeSize: 
    Type: Number
    Description: The Size in GB of the Cloud9 Instance Volume. 
    Default: 50

# Mappings:
#   EC2InstanceAMIMapping:
#     t3.medium:
#       EC2InstanceAMI: al2023-ami-kernel-default-x86_64
#     t4g.medium:
#       EC2InstanceAMI: al2023-ami-kernel-default-arm64
#     m5.large:
#       EC2InstanceAMI: al2023-ami-kernel-default-x86_64
#   EC2SSMPathMapping:
#     ubuntu-22.04:
#       EC2SSMPath: resolve:ssm:/aws/service/canonical/ubuntu/server/22.04/
#     amazonlinux-2023:
#       EC2SSMPath: resolve:ssm:/aws/service/ami-amazon-linux-latest/

Mappings:
  EC2InstanceAMIMapping:
    t3.medium:
      ubuntu22: /aws/service/canonical/ubuntu/server/22.04/stable/current/amd64/hvm/ebs-gp2/ami-id
      amazonlinux2023: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64
    t4g.medium:
      ubuntu22: /aws/service/canonical/ubuntu/server/22.04/stable/current/arm64/hvm/ebs-gp2/ami-id
      amazonlinux2023: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-arm64
    m5.large:
      ubuntu22: /aws/service/canonical/ubuntu/server/22.04/stable/current/amd64/hvm/ebs-gp2/ami-id
      amazonlinux2023: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64


Conditions: 
  CreateUbuntuResources: !Equals [!Ref EC2InstanceOS, "ubuntu22"]
  CreateAL2Resources: !Equals [!Ref EC2InstanceOS, "amazonlinux2023"]

Resources:
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: Environment
          Value: !Ref AWS::StackName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - ssm.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AdministratorAccess
      Path: "/"
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: EC2Role
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "ec2-security-group-${AWS::StackName}"
      GroupDescription: "Security Group for EC2"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId
  MyEC2Instance:
    DependsOn: 
      - MySSMParameterAdminKey
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: 
        Ref: EC2InstanceType
      # ImageId: !Join
      #   - ''
      #   - - !FindInMap [EC2SSMPathMapping, !Ref EC2InstanceOS, EC2SSMPath]
      #     - !FindInMap [EC2InstanceAMIMapping, !Ref EC2InstanceType, EC2InstanceAMI]
      ImageId: !Sub 
        - '{{resolve:ssm:${AMIParameter}}}'
        - AMIParameter: !FindInMap 
            - EC2InstanceAMIMapping
            - !Ref EC2InstanceType
            - !Ref EC2InstanceOS
      KeyName: !Ref "AWS::NoValue"
      IamInstanceProfile: 
        Ref: EC2InstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet:
            - !Ref InstanceSecurityGroup
          SubnetId: !Ref PublicSubnetId
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref EC2InstanceVolumeSize
            VolumeType: gp2
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Join ["", ["Instance-", !Ref AWS::StackName]]
        - Key: Environment
          Value: !Ref AWS::StackName

      UserData:
        Fn::Base64: !Sub |-
          #!/bin/bash -xe
          if [[ -f /etc/os-release ]] && grep -q "Amazon Linux" /etc/os-release; then
            USERNAME=ec2-user
            yum install -y aws-cfn-bootstrap
          else
            USERNAME=ubuntu
            apt update
            apt install -y python3 python3-pip heat-cfntools awscli
            # pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
            pip3 install heat_cfntools
          fi

          IDE_PASSWORD=$(uuidgen)
          mkdir -p /home/$USERNAME/.config/code-server
          touch /home/$USERNAME/.config/code-server/config.yaml
          tee /home/$USERNAME/.config/code-server/config.yaml <<-EOF
          cert: true 
          auth: password
          password: "$IDE_PASSWORD"
          bind-addr: 0.0.0.0:8443
          EOF
          aws ssm put-parameter --name admin-key-${AWS::StackName} --value "$IDE_PASSWORD" --type String --overwrite --region ${AWS::Region} 

          # call back to cfn # /opt/aws/bin/cfn-signal
          cfn-signal -s true '${PrivateWaitHandle}' # variable handled by cfn


  PrivateWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  PrivateWaitCondition:
    DependsOn: MyEC2Instance
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !Ref PrivateWaitHandle
      Timeout: '600' # about 2-4 min will receive signal
      Count: 1

  MySSMParameterAdminKey:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join ["", ["admin-key-", !Ref AWS::StackName]]
      Type: String
      Value: Hello World
      Description: A parameter created by CloudFormation and updated by ec2
      Tier: Standard
      DataType: text

  OutputBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties: 
      # VersioningConfiguration:
      #   Status: Enabled
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  EC2SSMDocument: 
    Type: AWS::SSM::Document
    Properties: 
      Tags:
        - Key: Environment
          Value: !Ref AWS::StackName
      DocumentType: Command
      DocumentFormat: YAML
      Content: 
        schemaVersion: '2.2'
        description: Bootstrap EC2 Instance
        mainSteps:
        - action: aws:runShellScript
          name: EC2Bootstrap
          inputs:
            runCommand:
            - "#!/bin/bash -x"
            - "TMPFILE=$(mktemp)"
            - !If [CreateUbuntuResources, "curl --location -o ${TMPFILE}-ONE.sh https://github.com/panlm/panlm.github.io/raw/main/docs/cloud9/script-ubuntu-prep-eks-env-part-one.sh", ""]
            - !If [CreateAL2Resources, "curl --location -o ${TMPFILE}-ONE.sh https://github.com/panlm/panlm.github.io/raw/main/docs/cloud9/script-prep-eks-env-part-one.sh", ""]
            - "chmod a+x ${TMPFILE}-ONE.sh"
            - !If [CreateUbuntuResources, "sudo -u ubuntu bash -x ${TMPFILE}-ONE.sh 2>&1", ""]
            - !If [CreateAL2Resources, "sudo -u ec2-user bash -x ${TMPFILE}-ONE.sh 2>&1", ""]
            - ""
            - "curl --location -o ${TMPFILE}-TWO.sh https://github.com/panlm/panlm.github.io/raw/main/docs/cloud9/script-prep-eks-env-part-two.sh"
            - "chmod a+x ${TMPFILE}-TWO.sh"
            - !If [CreateUbuntuResources, "sudo -u ubuntu bash -x  ${TMPFILE}-TWO.sh 2>&1", ""]
            - !If [CreateAL2Resources, "sudo -u ec2-user bash -x ${TMPFILE}-TWO.sh 2>&1", ""]
            - ""
            - "echo 0"
  
  BootstrapAssociation: 
    Type: AWS::SSM::Association
    DependsOn: OutputBucket 
    Properties: 
      Name: !Ref EC2SSMDocument
      OutputLocation: 
        S3Location:
          OutputS3BucketName: !Ref OutputBucket
          OutputS3KeyPrefix: bootstrapoutput
      Targets:
        - Key: tag:Environment
          Values:
          - !Ref AWS::StackName

Outputs: 
  MySSMParameterAdminKey:
    Description: Admin Key
    Value: !GetAtt MySSMParameterAdminKey.Value
  EC2InstanceId:
    Description: The ID of the EC2 instance
    Value: !Ref MyEC2Instance
  AccessURL:
    Description: URL for vscode
    Value: !Join ["", ["https://", !GetAtt MyEC2Instance.PublicIp, ":8443/" ]]

